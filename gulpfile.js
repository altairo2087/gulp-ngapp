// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var DIST_PATH, ENV_CURRENT, ENV_DEV, ENV_PROD, IMAGES, PORT, PUBLIC_PATH, Q, bower, build, clean, coffee, css, filter, gulp, html, images, inject, jade, js, log, opts, orderedCss, orderedCustomJs, orderedVendorJs, plugins, sass, server, task, tasks;

  gulp = require('gulp');

  Q = require('q');

  plugins = (require('gulp-load-plugins'))({
    pattern: ['gulp-*', 'gulp.*', 'del', 'main-bower-files'],
    replaceString: /\bgulp[\-.]/
  });

  PORT = 8000;

  DIST_PATH = 'dist';

  PUBLIC_PATH = 'public';

  IMAGES = ['png', 'jpg', 'jpeg', 'gif', 'ico', 'bmp'];

  ENV_PROD = 'prod';

  ENV_DEV = 'dev';

  ENV_CURRENT = ENV_DEV;

  log = function(error) {
    console.log((new Date.toString) + ":Error " + error.name + " in " + error.plugin + "\n " + error.message + "\n");
    return this.end();
  };

  clean = function() {
    return plugins.del([PUBLIC_PATH + "/**", "!" + PUBLIC_PATH, "!" + PUBLIC_PATH + "/.gitkeep"]);
  };

  orderedVendorJs = function() {
    return gulp.src(PUBLIC_PATH + "/vendor/*.js", {
      read: false
    }).pipe(plugins.order(["*jquery*", "*bootstrap.*", "*bootstrap*", "!*angular*", "*angular.*", "*angular*"]));
  };

  orderedCustomJs = function() {
    return gulp.src([PUBLIC_PATH + "/**/*.js", "!" + PUBLIC_PATH + "/vendor/**/*"], {
      read: false
    }).pipe(plugins.order([]));
  };

  orderedCss = function() {
    return gulp.src(PUBLIC_PATH + "/**/*.css", {
      read: false
    }).pipe(plugins.order(["*bootstrap.*", "*bootstrap*"]));
  };

  inject = function() {
    var q;
    q = Q.defer();
    gulp.src(PUBLIC_PATH + "/**/*.inject.html").pipe(plugins.inject(orderedCss(), {
      relative: true
    })).pipe(plugins.inject(orderedVendorJs(), {
      name: 'bower',
      relative: true
    })).pipe(plugins.inject(orderedCustomJs(), {
      relative: true
    })).pipe(plugins.rename(function(path) {
      return path.basename = path.basename.replace('.inject', '');
    })).pipe(gulp.dest(PUBLIC_PATH)).on('end', function() {
      return plugins.del(PUBLIC_PATH + "/**/*.inject.html").then(function() {
        return q.resolve();
      });
    });
    return q.promise;
  };

  server = function() {
    return gulp.src(PUBLIC_PATH).pipe(plugins.webserver({
      livereload: true,
      open: true,
      port: PORT
    }));
  };

  jade = function() {
    return gulp.src(DIST_PATH + "/**/*.jade").pipe(plugins.jade()).pipe(plugins.prettify({
      indent_size: 2
    })).pipe(gulp.dest(PUBLIC_PATH));
  };

  html = function() {
    return gulp.src(DIST_PATH + "/**/*.html").pipe(plugins.prettify({
      indent_size: 2
    })).pipe(gulp.dest(PUBLIC_PATH));
  };

  images = function() {
    var ext;
    images = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = IMAGES.length; i < len; i++) {
        ext = IMAGES[i];
        results.push(DIST_PATH + "/**/*." + ext);
      }
      return results;
    })();
    return gulp.src(images).pipe(gulp.dest(PUBLIC_PATH));
  };

  sass = function() {
    return gulp.src([DIST_PATH + "/**/*.sass", DIST_PATH + "/**/*.scss"]).pipe(plugins.sass()).pipe(gulp.dest(PUBLIC_PATH));
  };

  css = function() {
    return gulp.src(DIST_PATH + "/**/*.css").pipe(plugins.autoprefixer()).pipe(gulp.dest(PUBLIC_PATH));
  };

  filter = function(types) {
    return plugins.filter(types, {
      restore: true
    });
  };

  coffee = function() {
    return gulp.src(DIST_PATH + "/**/*.coffee").pipe(plugins.coffee()).pipe(gulp.dest(PUBLIC_PATH));
  };

  js = function() {
    return gulp.src(DIST_PATH + "/**/*.js").pipe(gulp.dest(PUBLIC_PATH));
  };

  bower = function() {
    var cssFilter, postfix, q;
    q = Q.defer();
    cssFilter = filter('**/*.css');
    if (ENV_CURRENT === ENV_PROD) {
      postfix = '.min';
    } else {
      postfix = '';
    }
    gulp.src(plugins.mainBowerFiles({
      overrides: {
        bootstrap: {
          main: ["./dist/js/bootstrap" + postfix + ".js", "./dist/css/bootstrap" + postfix + ".css", "./dist/fonts/*"]
        }
      }
    })).pipe(cssFilter).pipe(plugins.cssUrlAdjuster({
      replace: ['../fonts', './']
    })).pipe(cssFilter.restore).pipe(gulp.dest(PUBLIC_PATH + "/vendor")).on('end', function() {
      return q.resolve();
    });
    return q.promise;
  };

  build = function() {
    return clean().then(function() {
      jade();
      return bower().then(function() {
        return inject();
      });
    });
  };

  tasks = {
    clean: {
      desc: "clean " + PUBLIC_PATH + " folder",
      action: clean
    },
    server: {
      desc: "start local server on port " + PORT,
      action: server
    },
    build: {
      desc: "",
      action: build
    },
    "default": {
      action: function() {
        var opts, results, task;
        results = [];
        for (task in tasks) {
          opts = tasks[task];
          results.push(console.log(task + " - " + opts.desc));
        }
        return results;
      }
    }
  };

  for (task in tasks) {
    opts = tasks[task];
    gulp.task(task, opts.action);
  }

}).call(this);

//# sourceMappingURL=gulpfile.js.map
