// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var DIST_PATH, ENV_CURRENT, ENV_DEV, ENV_PROD, PORT, PUBLIC_PATH, bowerFiles, browserSync, clean, coffee, css, del, gulp, html, jade, js, log, opts, plugins, sass, server, task, tasks;

  gulp = require('gulp');

  plugins = require('gulp-load-plugins')();

  del = require('del');

  bowerFiles = require('main-bower-files');

  browserSync = require('browser-sync');

  PORT = 8000;

  DIST_PATH = 'dist';

  PUBLIC_PATH = 'public';

  ENV_PROD = 'prod';

  ENV_DEV = 'dev';

  ENV_CURRENT = ENV_DEV;

  log = function(error) {
    console.log((new Date.toString) + ":Error " + error.name + " in " + error.plugin + "\n " + error.message + "\n");
    return this.end();
  };

  clean = function() {
    return del([PUBLIC_PATH + "/**", "!" + PUBLIC_PATH]);
  };

  server = function() {
    return gulp.src(PUBLIC_PATH).pipe(plugins.webserver({
      livereload: true,
      open: true,
      port: PORT
    }));
  };

  jade = function() {
    return gulp.src(DIST_PATH + "/**/*.jade").pipe(plugins.jade()).pipe(plugins.prettify({
      indent_size: 2
    })).pipe(gulp.dest(PUBLIC_PATH));
  };

  html = function() {
    return gulp.src(DIST_PATH + "/**/*.html").pipe(plugins.prettify({
      indent_size: 2
    })).pipe(gulp.dest(PUBLIC_PATH));
  };

  sass = function() {
    return gulp.src([DIST_PATH + "/**/*.sass", DIST_PATH + "/**/*.scss"]).pipe(plugins.sass()).pipe(gulp.dest(PUBLIC_PATH));
  };

  css = function() {
    return gulp.src(DIST_PATH + "/**/*.css").pipe(gulp.dest(PUBLIC_PATH));
  };

  coffee = function() {
    return gulp.src(DIST_PATH + "/**/*.coffee").pipe(plugins.coffee()).pipe(gulp.dest(PUBLIC_PATH));
  };

  js = function() {
    return gulp.src(DIST_PATH + "/**/*.js").pipe(gulp.dest(PUBLIC_PATH));
  };

  tasks = {
    clean: {
      desc: "clean " + PUBLIC_PATH + " folder",
      action: clean
    },
    server: {
      desc: "start local server on port " + PORT,
      action: server
    },
    build: {
      desc: ""
    },
    test: {
      action: coffee
    },
    "default": {
      action: function() {
        var opts, results, task;
        results = [];
        for (task in tasks) {
          opts = tasks[task];
          results.push(console.log(task + " - " + opts.desc));
        }
        return results;
      }
    }
  };

  for (task in tasks) {
    opts = tasks[task];
    gulp.task(task, opts.action);
  }

}).call(this);

//# sourceMappingURL=gulpfile.js.map
